#!/usr/bin/env python

import sys
import os

import ev.build
import ev.log
import ev.config
import ev.clean
import ev.install

# if the ev command is ran without any arguments, print some
# helpful comments about its usage.
if len(sys.argv) == 1:
    print
    helpMsg = ('usage: ev <command> [<args>]'
               '\n'
               'Build and Install:\n'
               '   cmake       Generate CMake build trees\n'
               '   build       Run build command in generated CMake build tree(s)\n'
               '   install     Install build products\n'
               '\n'
               'Cleaning:\n'
               '   clean      Run CMake clean command in generated CMake build tree(s)\n'
               '   rm         Remove directories containing build trees and build products\n'
               '\n'
               'Utilities:\n'
               '   config     Environment configuration of build types and library types\n'
               '   log        Logging\n'
               '   test       Testing utility\n'
               '\n')
    print helpMsg
    sys.exit()



# first, check if this is the first time the user is starting this 
# script. If so, we need to ask them for some information which helps
# with the operation of this script.
home = os.path.expanduser('~')
evConf = home + '/.ev/config/ev.conf'
if not os.path.isfile(evConf):
    print
    ev.log.toFile('the eyeverify configuration file does not exit.')
    print
    ev.log.toFile('I will now guide you in creating it.')
    print
    ev.log.toFile('I will run your command after we\'ve created it')
    # initialize the configuration which creates a JSON file with
    # all the environmental variables this script needs.
    ev.config.init()

d = ev.config.load()

ev.log.toFile('\nStart ev command.')
if sys.argv[1] == 'build':
    if len(sys.argv) == 3:
        ev.log.toFile('Starting build...')
        ev.build.b(sys.argv[2])
    elif len(sys.argv) == 4:
        ev.log.toFile('Starting build...')
        ev.build.b(sys.argv[2], arg2 = sys.argv[3])
    else:
        ev.log.toFile('"ev build" requires one or two additional arguments.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

elif sys.argv[1] == 'cmake':
    if len(sys.argv) == 3:
        ev.config.status()
        ev.log.toFile('Generating cmake build trees...')
        ev.cmake.generate(sys.argv[2])
    elif len(sys.argv) == 4:
        ev.config.status()
        ev.log.toFile('Generating cmake build trees...')
        ev.cmake.generate(sys.argv[2], arg2 = sys.argv[3])
    else:
        ev.log.toFile('"ev cmake" requires one or two additional arguments.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

elif sys.argv[1] == 'clean':
    if len(sys.argv) == 3:
        ev.log.toFile('Cleaning up...')
        ev.clean.c(sys.argv[2])
    elif len(sys.argv) == 4:
        ev.log.toFile('Cleaning up...')
        ev.clean.c(sys.argv[2], arg2 = sys.argv[3])
    else:
        ev.log.toFile('"ev clean" requires one or two additional arguments.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

elif sys.argv[1] == 'rm':
    if len(sys.argv) == 3:
        ev.log.toFile('Removing things...')
        ev.rm.r(sys.argv[2])
    elif len(sys.argv) == 4:
        ev.log.toFile('Removing things...')
        ev.rm.r(sys.argv[2], arg2 = sys.argv[3])
    else:
        ev.log.toFile('"ev rm" requires one or two additional arguments.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

elif sys.argv[1] == 'install':
    if len(sys.argv) == 3:
        ev.log.toFile('Installing things...')
        ev.install.i(sys.argv[2])
    elif len(sys.argv) == 4:
        ev.log.toFile('Installing things...')
        ev.install.i(sys.argv[2], sys.argv[3])
    else:
        ev.log.toFile('"ev install" requires one or two additional arguments.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

elif sys.argv[1] == 'config':
    if len(sys.argv) == 3:
        ev.log.toFile('Configuring things...')
        ev.config.c(sys.argv[2])
    elif len(sys.argv) == 5:
        ev.log.toFile('Setting things...')
        ev.config.c(sys.argv[2], arg2 = sys.argv[3], arg3 = sys.argv[4])
    else:
        ev.log.toFile('"ev config" requires one or three additional argument.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

elif sys.argv[1] == 'test':
    if len(sys.argv) == 3:
        ev.log.toFile('Running the test...')
        ev.test.t(sys.argv[2])
    elif len(sys.argv) == 4:
        ev.log.toFile('Running the test...')
        ev.config.c(sys.argv[2], arg2 = sys.argv[3])
    else:
        ev.log.toFile('"ev test" requires one or two  additional arguments.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

elif sys.argv[1] == 'copy':
    if len(sys.argv) == 3:
        ev.log.toFile('Copying things...')
        ev.test.t(sys.argv[2])
    elif len(sys.argv) == 4:
        ev.log.toFile('Copying things...')
        ev.config.c(sys.argv[2], arg2 = sys.argv[3])
    else:
        ev.log.toFile('"ev copy" requires one or two  additional arguments.')
        ev.log.toFile('However, I found: ' + str(len(sys.argv) - 1) + ' arg(s).')
        ev.log.toFile('Aborting.\n\n')
        sys.exit()

else:
    ev.log.toFile('Unrecognized "ev" parameter:')
    ev.log.toFile('>>>> ' + sys.argv[1])
    print
    ev.log.toFile('Aborting.\n\n')
    sys.exit()
